// <auto-generated />
using System;
using MatchingAlgo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace MatchingAlgo.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221025221534_DBInit")]
    partial class DBInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AvailableDateDriver", b =>
                {
                    b.Property<Guid>("AvailableDatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriversId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailableDatesId", "DriversId");

                    b.HasIndex("DriversId");

                    b.ToTable("AvailableDateDriver");

                    b.HasData(
                        new
                        {
                            AvailableDatesId = new Guid("448b917a-2ae3-4016-afa8-8fba36230d05"),
                            DriversId = new Guid("6ac16ade-f293-4083-9c90-9af2397fd346")
                        },
                        new
                        {
                            AvailableDatesId = new Guid("c50e9108-a833-43be-96b9-91ccdd770c15"),
                            DriversId = new Guid("eeaad275-a039-4828-89a1-b56657863794")
                        },
                        new
                        {
                            AvailableDatesId = new Guid("ff192931-d7e5-4077-ba8e-c4d130032321"),
                            DriversId = new Guid("2558296f-7a0c-4730-ac1c-904ca1b2352c")
                        },
                        new
                        {
                            AvailableDatesId = new Guid("fe1151f7-57d7-4e14-a55d-8146201d4633"),
                            DriversId = new Guid("7baec409-db0d-49a3-8122-9e8cad6f593b")
                        },
                        new
                        {
                            AvailableDatesId = new Guid("8584a437-f91c-41fc-9bbf-86d5ffbff0b0"),
                            DriversId = new Guid("e4f265b4-f564-4417-82e6-e5039a87908c")
                        });
                });

            modelBuilder.Entity("AvailableDateHelper", b =>
                {
                    b.Property<Guid>("AvailableDatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HelpersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailableDatesId", "HelpersId");

                    b.HasIndex("HelpersId");

                    b.ToTable("AvailableDateHelper");

                    b.HasData(
                        new
                        {
                            AvailableDatesId = new Guid("448b917a-2ae3-4016-afa8-8fba36230d05"),
                            HelpersId = new Guid("a4f4865e-eec9-4d98-b0f5-c66fa3a87eed")
                        },
                        new
                        {
                            AvailableDatesId = new Guid("fe1151f7-57d7-4e14-a55d-8146201d4633"),
                            HelpersId = new Guid("d2759648-0c35-47fc-8d7f-b9adbe6b7f20")
                        },
                        new
                        {
                            AvailableDatesId = new Guid("8584a437-f91c-41fc-9bbf-86d5ffbff0b0"),
                            HelpersId = new Guid("e8f2b04d-6b60-4c35-8c6f-9f9454091821")
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.AvailableDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AvaialbeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HelperId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AvailableDate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("448b917a-2ae3-4016-afa8-8fba36230d05"),
                            AvaialbeDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("6ac16ade-f293-4083-9c90-9af2397fd346"),
                            HelperId = new Guid("a4f4865e-eec9-4d98-b0f5-c66fa3a87eed")
                        },
                        new
                        {
                            Id = new Guid("c50e9108-a833-43be-96b9-91ccdd770c15"),
                            AvaialbeDate = new DateTime(2022, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("eeaad275-a039-4828-89a1-b56657863794")
                        },
                        new
                        {
                            Id = new Guid("ff192931-d7e5-4077-ba8e-c4d130032321"),
                            AvaialbeDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("2558296f-7a0c-4730-ac1c-904ca1b2352c")
                        },
                        new
                        {
                            Id = new Guid("fe1151f7-57d7-4e14-a55d-8146201d4633"),
                            AvaialbeDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("7baec409-db0d-49a3-8122-9e8cad6f593b"),
                            HelperId = new Guid("d2759648-0c35-47fc-8d7f-b9adbe6b7f20")
                        },
                        new
                        {
                            Id = new Guid("8584a437-f91c-41fc-9bbf-86d5ffbff0b0"),
                            AvaialbeDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("e4f265b4-f564-4417-82e6-e5039a87908c"),
                            HelperId = new Guid("e8f2b04d-6b60-4c35-8c6f-9f9454091821")
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvaliableDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceToPickUp")
                        .HasColumnType("float");

                    b.Property<Point>("DriverLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VehicleSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ac16ade-f293-4083-9c90-9af2397fd346"),
                            AvaliableDateId = new Guid("448b917a-2ae3-4016-afa8-8fba36230d05"),
                            DistanceToPickUp = 5.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.518 7.45425)"),
                            ShiftId = new Guid("35bc3a02-934a-4c8b-bc4c-2a7fbb5a6ef2"),
                            VehicleSize = 0
                        },
                        new
                        {
                            Id = new Guid("eeaad275-a039-4828-89a1-b56657863794"),
                            AvaliableDateId = new Guid("c50e9108-a833-43be-96b9-91ccdd770c15"),
                            DistanceToPickUp = 2.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (52.516272 13.377722)"),
                            ShiftId = new Guid("b4a096f5-4958-4859-aee8-2ec591c7d9ef"),
                            VehicleSize = 1
                        },
                        new
                        {
                            Id = new Guid("2558296f-7a0c-4730-ac1c-904ca1b2352c"),
                            AvaliableDateId = new Guid("ff192931-d7e5-4077-ba8e-c4d130032321"),
                            DistanceToPickUp = 1.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (59.3275 18.0675)"),
                            ShiftId = new Guid("972728ce-c9f0-4382-baa3-38701b3e454c"),
                            VehicleSize = 0
                        },
                        new
                        {
                            Id = new Guid("7baec409-db0d-49a3-8122-9e8cad6f593b"),
                            AvaliableDateId = new Guid("fe1151f7-57d7-4e14-a55d-8146201d4633"),
                            DistanceToPickUp = 4.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.503333 -0.119722)"),
                            ShiftId = new Guid("7970e097-9128-41a0-9894-24d964fc8a61"),
                            VehicleSize = 2
                        },
                        new
                        {
                            Id = new Guid("e4f265b4-f564-4417-82e6-e5039a87908c"),
                            AvaliableDateId = new Guid("8584a437-f91c-41fc-9bbf-86d5ffbff0b0"),
                            DistanceToPickUp = 3.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (52.506272 10.377722)"),
                            ShiftId = new Guid("75cd05ca-94be-464c-b1ab-796c57a3ba81"),
                            VehicleSize = 0
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Helper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvaliableDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceToPickUp")
                        .HasColumnType("float");

                    b.Property<Point>("HelperLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Helpers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4f4865e-eec9-4d98-b0f5-c66fa3a87eed"),
                            AvaliableDateId = new Guid("448b917a-2ae3-4016-afa8-8fba36230d05"),
                            DistanceToPickUp = 5.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.518 7.45425)"),
                            ShiftId = new Guid("35bc3a02-934a-4c8b-bc4c-2a7fbb5a6ef2")
                        },
                        new
                        {
                            Id = new Guid("d2759648-0c35-47fc-8d7f-b9adbe6b7f20"),
                            AvaliableDateId = new Guid("fe1151f7-57d7-4e14-a55d-8146201d4633"),
                            DistanceToPickUp = 3.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.503333 -0.119722)"),
                            ShiftId = new Guid("c0f4fa61-a2e6-4c74-b26e-db4fe1409146")
                        },
                        new
                        {
                            Id = new Guid("e8f2b04d-6b60-4c35-8c6f-9f9454091821"),
                            AvaliableDateId = new Guid("8584a437-f91c-41fc-9bbf-86d5ffbff0b0"),
                            DistanceToPickUp = 3.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (59.3275 18.0675)"),
                            ShiftId = new Guid("b4a096f5-4958-4859-aee8-2ec591c7d9ef")
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndAvailableTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HelperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartAvailableTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Shift");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35bc3a02-934a-4c8b-bc4c-2a7fbb5a6ef2"),
                            DriverId = new Guid("6ac16ade-f293-4083-9c90-9af2397fd346"),
                            EndAvailableTime = new DateTime(2022, 1, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            HelperId = new Guid("a4f4865e-eec9-4d98-b0f5-c66fa3a87eed"),
                            StartAvailableTime = new DateTime(2022, 1, 1, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c0f4fa61-a2e6-4c74-b26e-db4fe1409146"),
                            EndAvailableTime = new DateTime(2022, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            HelperId = new Guid("d2759648-0c35-47fc-8d7f-b9adbe6b7f20"),
                            StartAvailableTime = new DateTime(2022, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b4a096f5-4958-4859-aee8-2ec591c7d9ef"),
                            DriverId = new Guid("eeaad275-a039-4828-89a1-b56657863794"),
                            EndAvailableTime = new DateTime(2022, 1, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            HelperId = new Guid("e8f2b04d-6b60-4c35-8c6f-9f9454091821"),
                            StartAvailableTime = new DateTime(2022, 1, 1, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("972728ce-c9f0-4382-baa3-38701b3e454c"),
                            DriverId = new Guid("2558296f-7a0c-4730-ac1c-904ca1b2352c"),
                            EndAvailableTime = new DateTime(2022, 1, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            StartAvailableTime = new DateTime(2022, 1, 1, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7970e097-9128-41a0-9894-24d964fc8a61"),
                            DriverId = new Guid("7baec409-db0d-49a3-8122-9e8cad6f593b"),
                            EndAvailableTime = new DateTime(2022, 1, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            StartAvailableTime = new DateTime(2022, 1, 1, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("75cd05ca-94be-464c-b1ab-796c57a3ba81"),
                            DriverId = new Guid("e4f265b4-f564-4417-82e6-e5039a87908c"),
                            EndAvailableTime = new DateTime(2022, 1, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            StartAvailableTime = new DateTime(2022, 1, 1, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AvailableDateDriver", b =>
                {
                    b.HasOne("MatchingAlgo.Data.AvailableDate", null)
                        .WithMany()
                        .HasForeignKey("AvailableDatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingAlgo.Data.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AvailableDateHelper", b =>
                {
                    b.HasOne("MatchingAlgo.Data.AvailableDate", null)
                        .WithMany()
                        .HasForeignKey("AvailableDatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingAlgo.Data.Helper", null)
                        .WithMany()
                        .HasForeignKey("HelpersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchingAlgo.Data.Driver", b =>
                {
                    b.HasOne("MatchingAlgo.Data.Shift", "Shift")
                        .WithMany("Drivers")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MatchingAlgo.Data.Helper", b =>
                {
                    b.HasOne("MatchingAlgo.Data.Shift", "Shift")
                        .WithMany("Helpers")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MatchingAlgo.Data.Shift", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Helpers");
                });
#pragma warning restore 612, 618
        }
    }
}
