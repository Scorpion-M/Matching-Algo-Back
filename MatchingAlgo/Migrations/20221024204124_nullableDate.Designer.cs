// <auto-generated />
using System;
using MatchingAlgo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace MatchingAlgo.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221024204124_nullableDate")]
    partial class nullableDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AvailableDateDriver", b =>
                {
                    b.Property<Guid>("AvailableDatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriversId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailableDatesId", "DriversId");

                    b.HasIndex("DriversId");

                    b.ToTable("AvailableDateDriver");
                });

            modelBuilder.Entity("AvailableDateHelper", b =>
                {
                    b.Property<Guid>("AvailableDatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HelpersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailableDatesId", "HelpersId");

                    b.HasIndex("HelpersId");

                    b.ToTable("AvailableDateHelper");
                });

            modelBuilder.Entity("MatchingAlgo.Data.AvailableDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AvaialbeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HelperId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AvailableDate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d236980-387a-4e79-a55e-29fe9984a5fa"),
                            AvaialbeDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("0471b3b1-8e8e-4a5a-bfc6-21f7edb42a40"),
                            HelperId = new Guid("170b7a8f-f843-4482-a79a-b77c4c574630")
                        },
                        new
                        {
                            Id = new Guid("4204a444-635f-4845-8926-881ab81092e5"),
                            AvaialbeDate = new DateTime(2022, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("acf7017f-9ac7-45a3-9063-30940be3ae37")
                        },
                        new
                        {
                            Id = new Guid("a582ee86-edd5-43e4-a078-83120fa5000e"),
                            AvaialbeDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("d3567850-6fb1-4a5a-b681-0334c075e689")
                        },
                        new
                        {
                            Id = new Guid("b4d8083c-44af-4bc1-a8d6-e904d4b3cabd"),
                            AvaialbeDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("4ec29ad8-a93e-4d96-94e5-8f5a27b6a019"),
                            HelperId = new Guid("c34d743d-f787-4b7d-8ebc-76c0760ff938")
                        },
                        new
                        {
                            Id = new Guid("423371d9-d9dd-491f-b0bd-a6c0728f9797"),
                            AvaialbeDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("6ecea8de-25a1-4305-9105-2a3b466ca61e"),
                            HelperId = new Guid("c1b66404-66c6-46b4-ad02-1d5a4c16f001")
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvaliableDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceToPickUp")
                        .HasColumnType("float");

                    b.Property<Point>("DriverLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VehicleSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0471b3b1-8e8e-4a5a-bfc6-21f7edb42a40"),
                            AvaliableDateId = new Guid("5d236980-387a-4e79-a55e-29fe9984a5fa"),
                            DistanceToPickUp = 5.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.518 7.45425)"),
                            ShiftId = new Guid("942daf1b-2f3b-4234-8054-b3aadb17a622"),
                            VehicleSize = 0
                        },
                        new
                        {
                            Id = new Guid("acf7017f-9ac7-45a3-9063-30940be3ae37"),
                            AvaliableDateId = new Guid("4204a444-635f-4845-8926-881ab81092e5"),
                            DistanceToPickUp = 2.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (52.516272 13.377722)"),
                            ShiftId = new Guid("7296b0fd-9f02-4a29-b86a-a627234f6b4c"),
                            VehicleSize = 1
                        },
                        new
                        {
                            Id = new Guid("d3567850-6fb1-4a5a-b681-0334c075e689"),
                            AvaliableDateId = new Guid("a582ee86-edd5-43e4-a078-83120fa5000e"),
                            DistanceToPickUp = 1.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (59.3275 18.0675)"),
                            ShiftId = new Guid("42f11c2e-3809-48a4-8fcd-cfaa20841abb"),
                            VehicleSize = 0
                        },
                        new
                        {
                            Id = new Guid("4ec29ad8-a93e-4d96-94e5-8f5a27b6a019"),
                            AvaliableDateId = new Guid("b4d8083c-44af-4bc1-a8d6-e904d4b3cabd"),
                            DistanceToPickUp = 4.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.503333 -0.119722)"),
                            ShiftId = new Guid("5fcf259a-9feb-48e5-a62b-2db50bb40163"),
                            VehicleSize = 2
                        },
                        new
                        {
                            Id = new Guid("6ecea8de-25a1-4305-9105-2a3b466ca61e"),
                            AvaliableDateId = new Guid("423371d9-d9dd-491f-b0bd-a6c0728f9797"),
                            DistanceToPickUp = 3.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (52.506272 10.377722)"),
                            ShiftId = new Guid("bba22ede-6646-4e93-bf97-cd992e93b78a"),
                            VehicleSize = 0
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Helper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvaliableDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceToPickUp")
                        .HasColumnType("float");

                    b.Property<Point>("HelperLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Helpers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("170b7a8f-f843-4482-a79a-b77c4c574630"),
                            AvaliableDateId = new Guid("5d236980-387a-4e79-a55e-29fe9984a5fa"),
                            DistanceToPickUp = 5.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.518 7.45425)"),
                            ShiftId = new Guid("942daf1b-2f3b-4234-8054-b3aadb17a622")
                        },
                        new
                        {
                            Id = new Guid("c34d743d-f787-4b7d-8ebc-76c0760ff938"),
                            AvaliableDateId = new Guid("b4d8083c-44af-4bc1-a8d6-e904d4b3cabd"),
                            DistanceToPickUp = 3.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.503333 -0.119722)"),
                            ShiftId = new Guid("fe792abb-723d-4b12-b9c3-ebf5b3e96f1f")
                        },
                        new
                        {
                            Id = new Guid("c1b66404-66c6-46b4-ad02-1d5a4c16f001"),
                            AvaliableDateId = new Guid("423371d9-d9dd-491f-b0bd-a6c0728f9797"),
                            DistanceToPickUp = 3.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (59.3275 18.0675)"),
                            ShiftId = new Guid("7296b0fd-9f02-4a29-b86a-a627234f6b4c")
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndAvailableTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("HelperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartAvailableTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Shift");

                    b.HasData(
                        new
                        {
                            Id = new Guid("942daf1b-2f3b-4234-8054-b3aadb17a622"),
                            DriverId = new Guid("0471b3b1-8e8e-4a5a-bfc6-21f7edb42a40"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            HelperId = new Guid("170b7a8f-f843-4482-a79a-b77c4c574630"),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("fe792abb-723d-4b12-b9c3-ebf5b3e96f1f"),
                            EndAvailableTime = new TimeSpan(0, 10, 30, 0, 0),
                            HelperId = new Guid("c34d743d-f787-4b7d-8ebc-76c0760ff938"),
                            StartAvailableTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("7296b0fd-9f02-4a29-b86a-a627234f6b4c"),
                            DriverId = new Guid("acf7017f-9ac7-45a3-9063-30940be3ae37"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            HelperId = new Guid("c1b66404-66c6-46b4-ad02-1d5a4c16f001"),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("42f11c2e-3809-48a4-8fcd-cfaa20841abb"),
                            DriverId = new Guid("d3567850-6fb1-4a5a-b681-0334c075e689"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5fcf259a-9feb-48e5-a62b-2db50bb40163"),
                            DriverId = new Guid("4ec29ad8-a93e-4d96-94e5-8f5a27b6a019"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("bba22ede-6646-4e93-bf97-cd992e93b78a"),
                            DriverId = new Guid("6ecea8de-25a1-4305-9105-2a3b466ca61e"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("AvailableDateDriver", b =>
                {
                    b.HasOne("MatchingAlgo.Data.AvailableDate", null)
                        .WithMany()
                        .HasForeignKey("AvailableDatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingAlgo.Data.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AvailableDateHelper", b =>
                {
                    b.HasOne("MatchingAlgo.Data.AvailableDate", null)
                        .WithMany()
                        .HasForeignKey("AvailableDatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingAlgo.Data.Helper", null)
                        .WithMany()
                        .HasForeignKey("HelpersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchingAlgo.Data.Driver", b =>
                {
                    b.HasOne("MatchingAlgo.Data.Shift", "Shift")
                        .WithMany("Drivers")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MatchingAlgo.Data.Helper", b =>
                {
                    b.HasOne("MatchingAlgo.Data.Shift", "Shift")
                        .WithMany("Helpers")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MatchingAlgo.Data.Shift", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Helpers");
                });
#pragma warning restore 612, 618
        }
    }
}
