// <auto-generated />
using System;
using MatchingAlgo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace MatchingAlgo.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221024202234_nullableValue")]
    partial class nullableValue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AvailableDateDriver", b =>
                {
                    b.Property<Guid>("AvailableDatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriversId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailableDatesId", "DriversId");

                    b.HasIndex("DriversId");

                    b.ToTable("AvailableDateDriver");
                });

            modelBuilder.Entity("AvailableDateHelper", b =>
                {
                    b.Property<Guid>("AvailableDatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HelpersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailableDatesId", "HelpersId");

                    b.HasIndex("HelpersId");

                    b.ToTable("AvailableDateHelper");
                });

            modelBuilder.Entity("MatchingAlgo.Data.AvailableDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AvaialbeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HelperId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AvailableDate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8db46ff0-a8a2-4387-b882-db6a8369189a"),
                            AvaialbeDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("1b0754ba-0d9d-402f-928d-ed72d3d95750"),
                            HelperId = new Guid("aed0ceb1-9af4-444b-97e1-aaf6e2e56ef5")
                        },
                        new
                        {
                            Id = new Guid("4411db20-c110-4306-b984-507626129b98"),
                            AvaialbeDate = new DateTime(2022, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("5eb4d747-f70d-47ca-87e0-4090525dbda2"),
                            HelperId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("aebf3869-bb69-4a06-8028-8e217a0c7f57"),
                            AvaialbeDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("44f9d7cc-8376-43b7-a3e7-1eb4b695707a"),
                            HelperId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("2d61d972-775d-4c14-9c37-13fe08492d67"),
                            AvaialbeDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("d6cc015d-d291-4c75-8e1d-eb3253ad254f"),
                            HelperId = new Guid("9c013935-d2bc-4ca6-845a-d33f82cf04a0")
                        },
                        new
                        {
                            Id = new Guid("2a8e6da9-8998-480a-a5cc-68fbe7a023ac"),
                            AvaialbeDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("0e4e67d9-8000-45b6-a47e-faa4768c3b71"),
                            HelperId = new Guid("99e35547-3186-42cc-a1e7-540308d5e9c5")
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvaliableDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceToPickUp")
                        .HasColumnType("float");

                    b.Property<Point>("DriverLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VehicleSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b0754ba-0d9d-402f-928d-ed72d3d95750"),
                            AvaliableDateId = new Guid("8db46ff0-a8a2-4387-b882-db6a8369189a"),
                            DistanceToPickUp = 5.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.518 7.45425)"),
                            ShiftId = new Guid("ee113259-66f7-4efe-a5c4-24ab27ed2fe7"),
                            VehicleSize = 0
                        },
                        new
                        {
                            Id = new Guid("5eb4d747-f70d-47ca-87e0-4090525dbda2"),
                            AvaliableDateId = new Guid("4411db20-c110-4306-b984-507626129b98"),
                            DistanceToPickUp = 2.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (52.516272 13.377722)"),
                            ShiftId = new Guid("2ee189eb-60a5-4bfd-9507-adac90efd207"),
                            VehicleSize = 1
                        },
                        new
                        {
                            Id = new Guid("44f9d7cc-8376-43b7-a3e7-1eb4b695707a"),
                            AvaliableDateId = new Guid("aebf3869-bb69-4a06-8028-8e217a0c7f57"),
                            DistanceToPickUp = 1.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (59.3275 18.0675)"),
                            ShiftId = new Guid("da6847ce-6a31-4953-9f19-2b342d4e9e9b"),
                            VehicleSize = 0
                        },
                        new
                        {
                            Id = new Guid("d6cc015d-d291-4c75-8e1d-eb3253ad254f"),
                            AvaliableDateId = new Guid("2d61d972-775d-4c14-9c37-13fe08492d67"),
                            DistanceToPickUp = 4.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.503333 -0.119722)"),
                            ShiftId = new Guid("784bcab2-f331-4bb2-b442-4bdbf241dcd9"),
                            VehicleSize = 2
                        },
                        new
                        {
                            Id = new Guid("0e4e67d9-8000-45b6-a47e-faa4768c3b71"),
                            AvaliableDateId = new Guid("2a8e6da9-8998-480a-a5cc-68fbe7a023ac"),
                            DistanceToPickUp = 3.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (52.506272 10.377722)"),
                            ShiftId = new Guid("61db7a72-9db6-44c7-b918-4efad85558ce"),
                            VehicleSize = 0
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Helper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvaliableDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceToPickUp")
                        .HasColumnType("float");

                    b.Property<Point>("HelperLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Helpers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aed0ceb1-9af4-444b-97e1-aaf6e2e56ef5"),
                            AvaliableDateId = new Guid("8db46ff0-a8a2-4387-b882-db6a8369189a"),
                            DistanceToPickUp = 5.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.518 7.45425)"),
                            ShiftId = new Guid("ee113259-66f7-4efe-a5c4-24ab27ed2fe7")
                        },
                        new
                        {
                            Id = new Guid("9c013935-d2bc-4ca6-845a-d33f82cf04a0"),
                            AvaliableDateId = new Guid("2d61d972-775d-4c14-9c37-13fe08492d67"),
                            DistanceToPickUp = 3.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.503333 -0.119722)"),
                            ShiftId = new Guid("8a135904-60c3-4493-9c51-11e67d865b95")
                        },
                        new
                        {
                            Id = new Guid("99e35547-3186-42cc-a1e7-540308d5e9c5"),
                            AvaliableDateId = new Guid("2a8e6da9-8998-480a-a5cc-68fbe7a023ac"),
                            DistanceToPickUp = 3.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (59.3275 18.0675)"),
                            ShiftId = new Guid("2ee189eb-60a5-4bfd-9507-adac90efd207")
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndAvailableTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("HelperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartAvailableTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Shift");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee113259-66f7-4efe-a5c4-24ab27ed2fe7"),
                            DriverId = new Guid("1b0754ba-0d9d-402f-928d-ed72d3d95750"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            HelperId = new Guid("aed0ceb1-9af4-444b-97e1-aaf6e2e56ef5"),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8a135904-60c3-4493-9c51-11e67d865b95"),
                            EndAvailableTime = new TimeSpan(0, 10, 30, 0, 0),
                            HelperId = new Guid("9c013935-d2bc-4ca6-845a-d33f82cf04a0"),
                            StartAvailableTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2ee189eb-60a5-4bfd-9507-adac90efd207"),
                            DriverId = new Guid("5eb4d747-f70d-47ca-87e0-4090525dbda2"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            HelperId = new Guid("99e35547-3186-42cc-a1e7-540308d5e9c5"),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("da6847ce-6a31-4953-9f19-2b342d4e9e9b"),
                            DriverId = new Guid("44f9d7cc-8376-43b7-a3e7-1eb4b695707a"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("784bcab2-f331-4bb2-b442-4bdbf241dcd9"),
                            DriverId = new Guid("d6cc015d-d291-4c75-8e1d-eb3253ad254f"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("61db7a72-9db6-44c7-b918-4efad85558ce"),
                            DriverId = new Guid("0e4e67d9-8000-45b6-a47e-faa4768c3b71"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("AvailableDateDriver", b =>
                {
                    b.HasOne("MatchingAlgo.Data.AvailableDate", null)
                        .WithMany()
                        .HasForeignKey("AvailableDatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingAlgo.Data.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AvailableDateHelper", b =>
                {
                    b.HasOne("MatchingAlgo.Data.AvailableDate", null)
                        .WithMany()
                        .HasForeignKey("AvailableDatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingAlgo.Data.Helper", null)
                        .WithMany()
                        .HasForeignKey("HelpersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchingAlgo.Data.Driver", b =>
                {
                    b.HasOne("MatchingAlgo.Data.Shift", "Shift")
                        .WithMany("Drivers")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MatchingAlgo.Data.Helper", b =>
                {
                    b.HasOne("MatchingAlgo.Data.Shift", "Shift")
                        .WithMany("Helpers")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MatchingAlgo.Data.Shift", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Helpers");
                });
#pragma warning restore 612, 618
        }
    }
}
