// <auto-generated />
using System;
using MatchingAlgo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace MatchingAlgo.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221023222452_DataBaseCreated")]
    partial class DataBaseCreated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AvailableDateDriver", b =>
                {
                    b.Property<Guid>("AvailableDatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriversId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailableDatesId", "DriversId");

                    b.HasIndex("DriversId");

                    b.ToTable("AvailableDateDriver");
                });

            modelBuilder.Entity("AvailableDateHelper", b =>
                {
                    b.Property<Guid>("AvailableDatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HelpersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailableDatesId", "HelpersId");

                    b.HasIndex("HelpersId");

                    b.ToTable("AvailableDateHelper");
                });

            modelBuilder.Entity("MatchingAlgo.Data.AvailableDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AvaialbeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HelperId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AvailableDate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be87197e-22c7-49ad-9c13-89aa039466fa"),
                            AvaialbeDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("00000000-0000-0000-0000-000000000000"),
                            HelperId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f806f3f3-8fc3-41cb-a0d5-aff5f0997ef4"),
                            AvaialbeDate = new DateTime(2022, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("00000000-0000-0000-0000-000000000000"),
                            HelperId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("b0b2e5ca-1cb7-4c76-a363-93f06dea76b9"),
                            AvaialbeDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("00000000-0000-0000-0000-000000000000"),
                            HelperId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvaliableDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceToPickUp")
                        .HasColumnType("float");

                    b.Property<Point>("DriverLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VehicleSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bc431ae-3f80-46e9-887d-6cd354598d87"),
                            AvaliableDateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DistanceToPickUp = 5.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.518 7.45425)"),
                            VehicleSize = 0
                        },
                        new
                        {
                            Id = new Guid("d42ae769-b316-43c8-8554-412141af8fb8"),
                            AvaliableDateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DistanceToPickUp = 2.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (52.516272 13.377722)"),
                            VehicleSize = 1
                        },
                        new
                        {
                            Id = new Guid("2a152f6c-dbf5-42b7-b3d1-56efebca428e"),
                            AvaliableDateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DistanceToPickUp = 1.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (59.3275 18.0675)"),
                            VehicleSize = 0
                        },
                        new
                        {
                            Id = new Guid("aa0dcc1d-da5f-482e-a3e5-5554b5cf507c"),
                            AvaliableDateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DistanceToPickUp = 4.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.503333 -0.119722)"),
                            VehicleSize = 2
                        },
                        new
                        {
                            Id = new Guid("05ed0d77-abcc-480f-8d8c-4520dd5a1a43"),
                            AvaliableDateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DistanceToPickUp = 3.0,
                            DriverLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (52.506272 10.377722)"),
                            VehicleSize = 0
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Helper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvaliableDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceToPickUp")
                        .HasColumnType("float");

                    b.Property<Point>("HelperLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Helpers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bf35939-759f-4874-b958-4507c6afee09"),
                            AvaliableDateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DistanceToPickUp = 5.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.518 7.45425)")
                        },
                        new
                        {
                            Id = new Guid("b3d821f8-4661-40e5-9633-9755c0e8b13e"),
                            AvaliableDateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DistanceToPickUp = 3.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.503333 -0.119722)")
                        },
                        new
                        {
                            Id = new Guid("e9abb058-4a5b-4814-923d-c6925690fedf"),
                            AvaliableDateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DistanceToPickUp = 3.0,
                            HelperLocation = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (59.3275 18.0675)")
                        });
                });

            modelBuilder.Entity("MatchingAlgo.Data.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndAvailableTime")
                        .HasColumnType("time");

                    b.Property<Guid>("HelperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartAvailableTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Shift");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87418dcb-59e1-480c-92c9-de7730780233"),
                            DriverId = new Guid("7bc431ae-3f80-46e9-887d-6cd354598d87"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            HelperId = new Guid("1bf35939-759f-4874-b958-4507c6afee09"),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d64823be-617c-4ca2-b730-07ad945bb17b"),
                            DriverId = new Guid("00000000-0000-0000-0000-000000000000"),
                            EndAvailableTime = new TimeSpan(0, 10, 30, 0, 0),
                            HelperId = new Guid("b3d821f8-4661-40e5-9633-9755c0e8b13e"),
                            StartAvailableTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("c36ef7ea-b585-497c-8d58-3e123684eaf6"),
                            DriverId = new Guid("d42ae769-b316-43c8-8554-412141af8fb8"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            HelperId = new Guid("e9abb058-4a5b-4814-923d-c6925690fedf"),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f6ea1dd0-f26f-4e14-8afd-5a574892d0d2"),
                            DriverId = new Guid("2a152f6c-dbf5-42b7-b3d1-56efebca428e"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            HelperId = new Guid("00000000-0000-0000-0000-000000000000"),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("89ca1462-7d61-4549-a5d8-888032da9b70"),
                            DriverId = new Guid("aa0dcc1d-da5f-482e-a3e5-5554b5cf507c"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            HelperId = new Guid("00000000-0000-0000-0000-000000000000"),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("27c1c667-1e3a-4988-a550-8e4573493465"),
                            DriverId = new Guid("05ed0d77-abcc-480f-8d8c-4520dd5a1a43"),
                            EndAvailableTime = new TimeSpan(0, 11, 30, 0, 0),
                            HelperId = new Guid("00000000-0000-0000-0000-000000000000"),
                            StartAvailableTime = new TimeSpan(0, 9, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("AvailableDateDriver", b =>
                {
                    b.HasOne("MatchingAlgo.Data.AvailableDate", null)
                        .WithMany()
                        .HasForeignKey("AvailableDatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingAlgo.Data.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AvailableDateHelper", b =>
                {
                    b.HasOne("MatchingAlgo.Data.AvailableDate", null)
                        .WithMany()
                        .HasForeignKey("AvailableDatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingAlgo.Data.Helper", null)
                        .WithMany()
                        .HasForeignKey("HelpersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchingAlgo.Data.Driver", b =>
                {
                    b.HasOne("MatchingAlgo.Data.Shift", "Shift")
                        .WithMany("Drivers")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MatchingAlgo.Data.Helper", b =>
                {
                    b.HasOne("MatchingAlgo.Data.Shift", "Shift")
                        .WithMany("Helpers")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MatchingAlgo.Data.Shift", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Helpers");
                });
#pragma warning restore 612, 618
        }
    }
}
